// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  OWNER
  EDITOR // allows adding items onto the list and commenting.
  VIEWER // allows view only for unpublished rankings.
}

enum Visibility {
  PRIVATE
  RESTRICTED
  PUBLIC
}

model User {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  avatar    String
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now())

  // ownership of items created.
  items Item[]

  // comments posted by this user.
  comments Comment[]

  // lists where users have some sort of admin powers.
  membership EditorsOfList[]
}

model List {
  id        String          @id @unique @default(uuid())
  title     String          @default("Untitled List")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  thumbnail String?
  category  String?
  visibility Visibility
  description String?
  members   EditorsOfList[]
  items     Item[]
}

model EditorsOfList {
  role   Role
  userId String
  listId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, listId])
  @@index([userId])
  @@index([listId])
}

model Item {
  id        String    @id @unique @default(uuid())
  rating    Float
  name      String
  description String?
  thumbnail String?
  ownerId   String
  createdBy User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listId    String
  list      List      @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments  Comment[]

  @@index([ownerId])
  @@index([listId])
}

model Comment {
  id        String   @id @unique @default(uuid())
  content   String
  ownerId   String
  createdBy User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([ownerId])
  @@index([itemId])
}
