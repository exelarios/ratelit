"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Comment implements Node {
  content: String!
  createdAt: Date!
  createdBy: User!
  id: ID!
  itemId: ID!
  ownerId: ID!
  updatedAt: Date!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian
calendar.This scalar is serialized to a string in ISO 8601 format and parsed
from a string in ISO 8601 format.
"""
scalar Date

type Item implements Node {
  comments(after: ID, before: ID, first: Int, last: Int): ItemCommentsConnection!
  createdAt: Date!
  description: String
  id: ID!
  name: String!
  ownerId: ID!
  rating: Float!
  thumbnail: String
  updatedAt: Date!
}

type ItemCommentsConnection {
  edges: [ItemCommentsConnectionEdge]!
  pageInfo: PageInfo!
}

type ItemCommentsConnectionEdge {
  cursor: ID!
  node: Comment!
}

input ItemCreateInput {
  description: String
  name: String!
  rank: Int!

  """accepts only base64 encoding"""
  thumbnail: Upload
}

type List implements Node {
  categories: [String!]!
  createdAt: Date!
  description: String
  editors(after: ID, before: ID, first: Int, last: Int): ListEditorsConnection!
  following(after: ID, before: ID, first: Int, last: Int): ListFollowingConnection!
  id: ID!
  isFollowing: Boolean!
  items: [Item!]!
  owner: User!
  role: String!
  thumbnail: String!
  title: String!
  updatedAt: Date!
  visibility: Visibility!
}

input ListCreateInput {
  categories: [String!]
  description: String

  """encode in base64"""
  thumbnail: Upload!
  title: String!
  visibility: Visibility!
}

type ListEditorsConnection {
  edges: [ListEditorsConnectionEdge]!
  pageInfo: PageInfo!
}

type ListEditorsConnectionEdge {
  cursor: ID!
  node: Membership!
}

type ListFollowingConnection {
  edges: [ListFollowingConnectionEdge]!
  pageInfo: PageInfo!
}

type ListFollowingConnectionEdge {
  cursor: ID!
  node: Membership!
}

enum ListTabOptions {
  All
  Author
  Following
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  access: String!
  refresh: String!
  user: User!
}

type Membership implements Node {
  id: ID!
  list: List!
  role: String!
  user: User!
}

type Mutation {
  FollowList(listId: ID!): List!
  createItem(data: ItemCreateInput!, listId: String!): Item!
  createList(data: ListCreateInput!): List!
  login(input: LoginInput!): LoginPayload!
  refreshToken(
    """refresh token"""
    token: String!
  ): Tokens!
  register(input: RegisterInput!): RegisterPayload!
  verifyToken: User!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type Query {
  List(
    """The list assoicated to this id."""
    id: String!
  ): List!

  """Query a user based on the user's email."""
  User(email: String!): User!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

input RegisterInput {
  email: String
  firstName: String
  lastName: String
  password: String
}

type RegisterPayload {
  access: String!
  refresh: String!
  user: User!
}

type Tokens {
  access: String!
  refresh: String!
}

scalar Upload

type User implements Node {
  avatar: String!
  createdAt: Date!
  email: String!
  feed(after: ID, before: ID, first: Int, last: Int): UserFeedConnection!
  firstName: String!
  id: ID!
  lastName: String!
  list(after: ID, before: ID, first: Int, last: Int, tabOption: ListTabOptions): UserListConnection!
  name: String!
}

type UserFeedConnection {
  edges: [UserFeedConnectionEdge]!
  pageInfo: PageInfo!
}

type UserFeedConnectionEdge {
  cursor: ID!
  node: List!
}

type UserListConnection {
  edges: [UserListConnectionEdge]!
  pageInfo: PageInfo!
}

type UserListConnectionEdge {
  cursor: ID!
  node: List!
}

enum Visibility {
  PRIVATE
  PUBLIC
  RESTRICTED
}

